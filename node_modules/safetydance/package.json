{
  "name": "safetydance",
  "description": "Exception safety in node.js",
  "version": "0.0.11",
  "author": {
    "name": "Girish Ramakrishnan",
    "email": "girish@forwardbias.in"
  },
  "license": "MIT",
  "engines": [
    "node >= 0.8.0"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gramakri/safetydance.git"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -- ./test"
  },
  "readme": "Safety Dance\n============\n\nThis node.js module provides you exception safety. That is to say that\nthe functions of this module never ever throw.\n\nIf you are annoyed with node.js built-in API throwing exceptions and\nusing exceptions as multi-value return statements, this module is for you.\n\nThis module catches any exception in the function you want to call. If there\nis no exception, it behaves as always. If there was an exception, it catches\nit, makes it available via error property (like errno).\n\nSo, instead of:\n```\ntry {\n    var result = JSON.parse(something);\n} catch (e) {\n    ...\n}\n```\n\nyou can write:\n```\nvar result = safe.JSON.parse(something);\nif (result === null) { ... }\n```\n\nInstallation\n------------\nnpm install safetydance\n\nUsage\n-----\nYou can call arbitrary synchronous functions without having to worry about exceptions.\n```\nvar safeCall = require('safetydance');\nvar result = safeCall(function () { return 1 + 2; }); // will return 3\nresult = safeCall(function () { throw new Error('bad'); }); // will return null\n```\n\nYou can pass the 'this' as the first argument.\n```\nvar obj = { a: 10 };\nvar result = safeCall(obj, function () { return this.a; }); // will return 10\n```\n\nThis module provide conveniences for commonly used functions.\n```\nvar safe = require('safetydance');\nvar json = safe.JSON.parse('This is totally { not json }');\nconsole.log(json); // will be null\nconsole.log(safe.error); // will contain SyntaxError\n```\n\nThe error gets cleared for successful operations.\n```\njson = safe.JSON.parse('{ \"totally\" : \"json\" }');\nconsole.log(json); // { totally: \"json\" }\nconsole.log(safe.error); // will be null\n```\n\nAPI\n---\n* safeCall(optionalThis, functionToCall, valueToReturnIfErrored)\n* error - the error of the last function call\n* Convenience (refer to node.js docs for details)\n  * JSON.parse - returns null on error, object on success\n  * JSON.stringify - returns null on error, string on success\n  * fs.readFileSync - returns null on error, string/buffer on success\n  * fs.writeFileSync - returns false on error, true on success\n  * fs.statSync - returns null on error, stat object on success\n  * fs.existsSync - returns false on error, true/false on success\n  * fs.mkdirSync - returns false on error, true on success\n  * fs.unlinkSync - returns false on error, true on success\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gramakri/safetydance/issues"
  },
  "_id": "safetydance@0.0.11",
  "dist": {
    "shasum": "b59373f10de653dddf4b9580d3a1c9e314c9f1ee"
  },
  "_from": "safetydance@",
  "_resolved": "https://registry.npmjs.org/safetydance/-/safetydance-0.0.11.tgz"
}
