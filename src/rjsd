#!/usr/bin/env node

'use strict';

/*global require, process, __filename, setTimeout*/

var safe = require('safetydance');
var rjs = require('./rjs');
var log = require('./log');
var Args = require('./Args');
var Daemon = require('./Daemon');

var daemon = new Daemon;

function formatXML(tag, str)
{
    // if (str.indexOf('\n')
    // return "<" + tag + " length=\"" + str.length + "\">" + str + "</" + tag + ">";
    return '<' + tag + '>' + str + '</' + tag + '>';
}

function formatRaw(type, str)
{
    return type + ': ' + str;
}

function writeElisp(response)
{
    var type = response.text;
    function send(str, formatted)
    {
        var msg = "(cons '" + type + ' ';
        if (formatted) {
            msg += str;
        } else {
            msg += '"' + rjs.elispEscape(str) + '"';
        }
        msg += ')';
        log.writeResponse(msg);
    }

    log.verboseLog('processing message', response);
    if (response.type == rjs.MESSAGE_ERROR) {
        send(response.text);
    } else if (response.target) {
        type = 'location';
        send(rjs.printLocation({ location: response.target }));
    } else if (response.references || response.locations) {
        var locs = response.references || response.locations;
        if (locs.length == 1) {
            type = 'location';
            send(rjs.printLocation({ location: locs[0] }));
            return;
        }

        type = 'locations';
        var cdr = "(list";
        var fileCache = {};
        locs.forEach(function(loc) {
            var cons = ' (cons "' + rjs.elispEscape(rjs.printLocation({location: loc})) + '" ';
            var ctx = rjs.context(loc, fileCache);
            if (ctx) {
                cons += '"' + rjs.elispEscape(ctx) + '")';
            } else {
                cons += 'nil)';
            }
            cdr += cons;
        });
        cdr += ')';
        send(cdr, true);
    } else if (response.hasOwnProperty('dump')) {
        send(response.dump);
    } else if (response.cursorInfo) {
        // write(function() {
        //     var ret = [ rjs.printLocation({ location: response.cursorInfo.location }) ];
        //     ret.push('Name: ' + response.cursorInfo.name + (response.cursorInfo.definition ? ' Definition' : ' Reference'));
        //     if (response.cursorInfo.references && response.cursorInfo.references.length) {
        //         var fileCache = {};
        //         if (response.cursorInfo.target) {
        //             ret.push('Target: ' + rjs.printLocation({location: response.cursorInfo.target, header: '  ',
        //                                                      fileCache: fileCache, showContext: true }));
        //         }
        //         if (response.cursorInfo.references.length > 0) {
        //             ret.push('References:');
        //             response.cursorInfo.references.forEach(function(loc) {
        //                 ret.push(rjs.printLocation({location: loc, header: '  ',
        //                                             fileCache: fileCache, showContext: true }));
        //             });
        //         }
        //     }
        //     return ret.join('\n');
        // });
    } else if (response.symbolNames) {
        var symNames = '(list' + response.symbolNames.map(function(name) {
            return ' "' + rjs.elispEscape(name) + '"';
        }) + ')';
        send(symNames);
    }
}
function writeRaw(response)
{
    log.writeResponse(JSON.stringify(response));
}

function writeXML(response)
{
    // ### implement me?
}

var write;
switch (Args.args.format) {
case 'elisp':
    write = writeElisp;
    break;
case 'raw':
    write = writeRaw;
    break;
case 'xml':
    write = writeXML;
    break;
}

var pendingStdIn = '';
process.stdin.on('readable', function() {
    var read = process.stdin.read();
    if (!read)
        return;
    pendingStdIn += read;
    var lines = pendingStdIn.split('\n');
    if (lines.length > 1) {
        for (let i=0; i<lines.length - 1; ++i) {
            var commands;
            if (!lines[i])
                continue;
            if (lines[i][0] === '-') {
                var parsed = Args.parseArgs(lines[i].split(/ +/), rjs.clientParseArgsOptions);
                if (parsed.help) {
                    log.writeResponse(rjs.clientUsageString);
                    continue;
                }
                commands = rjs.createCommands(parsed);
            } else {
                commands = [ safe.JSON.parse(lines[i]) ];
            }
            if (!commands.length) {
                log.writeResponse('error: Unknown command: ' + lines[i]);
                continue;
            }
            log.verboseLog(commands);

            commands.forEach(function(msg) {
                daemon.processMessage(msg, function(response) {
                    write(response);
                });
            });
        }
        pendingStdIn = lines[lines.length - 1] || '';
    }
});
