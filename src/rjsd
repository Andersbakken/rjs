#!/usr/bin/env node

/*global require, process, RJS, __filename*/

var safe = require('safetydance');
var fs = require('fs');
var ws = require('ws');
var rjs = require('rjs');
var indexer = require('indexer');
var parseArgs = require('minimist');
var usageString = ('Usage:\n$0 ...options\n' +
                   '-v|--verbose\n' +
                   '-h|--help\n' +
                   '-l|--logfile\n' +
                   '-p|--port [default ' + rjs.defaultPort + ']\n');
var parseArgsOptions = { alias: { l: 'logfile', v: 'verbose', 'p': 'port', h: 'help' }, default: { p: rjs.defaultPort } };
var args = parseArgs(process.argv.slice(2), parseArgsOptions);

var outputs = [
    {
        log: function(str) { console.error(str); },
        verbose: args.verbose
    }
];

function addLog(conn, verbose) {
    outputs.push({
        log: function(str) {
            conn.send(JSON.stringify({type: rjs.MESSAGE_LOG, log: str, error: rjs.ERROR_MORE_DATA }));
        },
        connection: conn,
        verbose: verbose
    });
}

function removeLog(conn) {
    for (var i=0; i<outputs.length; ++i) {
        if (outputs[i].connection == conn) {
            outputs.splice(i, 1);
            break;
        }
    }
}

function sendToOutput(verbose, str)
{
    for (var i=0; i<outputs.length; ++i) {
        if (!verbose || outputs[i].verbose) {
            outputs[i].log(str);
        }
    }
}

function formatLog(args) {
    var out = "";
    function add(obj) {
        var str;
        if (obj instanceof Object) {
            try {
                str = JSON.stringify(obj);
            } catch (err) {
            }
        }
        if (!str) {
            str = "" + obj;
        }
        if (out.length && out[out.length - 1] != ' ')
            out += ' ';
        out += str;
    }
    for (var i=0; i<args.length; ++i) {
        add(args[i]);
    }
    return out;
}

function log() { sendToOutput(false, formatLog(arguments)); }
function verboseLog() { sendToOutput(true, formatLog(arguments)); }

function exit(code, message, showUsage)
{
    function log(out) {
        if (code) {
            console.error(out);
        } else {
            console.log(out);
        }
    }

    if (showUsage) {
        log(usageString.replace('$0', __filename));
    }
    if (message)
        log(message);
    process.exit(code);
}

(function() {
    if (args['_'].length)
        exit(1, 'Invalid arguments', true);
    var validArgs = {};
    var arg;
    for (arg in parseArgsOptions.alias) {
        validArgs[arg] = true;
        validArgs[parseArgsOptions.alias[arg]] = true;
    }
    for (arg in args) {
        if (arg != '_' && args.hasOwnProperty(arg) && !validArgs[arg])
            exit(1, 'Unrecognized argument ' + arg, true);
    }
    if (args['file'] instanceof Array)
        exit(1, 'Too many --file arguments', true);
    if (args['help']) {
        exit(0, '', true);
    }
})();


if (args.help) {
    exit(0, "", true);
}

var db = {};
var server = new ws.Server({ port:args.port });

function processMessage(msg, sendFunc) {
    var msgType;
    function send(obj) {
        if (!obj.error)
            obj.error = rjs.ERROR_OK;
        if (typeof msgType !== 'undefined')
            obj.type = msgType;
        sendFunc(obj);
        verboseLog("sending", obj);
    }

    verboseLog("got message", msg);
    if (!msg) {
        send({error: rjs.ERROR_PROTOCOL_ERROR});
        return;
    }
    msgType = msg.type;
    switch (msg.type) {
    case rjs.MESSAGE_COMPILE:
        var fileName = msg.file;
        msg = undefined;
        if (!fileName) {
            send({error: rjs.ERROR_MISSING_FILE});
            return;
        }
        if (db[fileName]) {
            var stat = safe.fs.statSync(fileName);
            if (!stat) {
                send({error: rjs.ERROR_STATFAILURE});
                return;
            }
            if (stat.mtime <= db[fileName].indexTime) {
                send({error: rjs.ERROR_FILE_ALREADY_INDEXED});
                return;
            }
        }
        function index(output) {
            log("index", fileName);
            var start = new Date();
            var source = safe.fs.readFileSync(fileName, { encoding:'utf8' });
            var indexTime = new Date();
            if (!source) {
                console.error("Couldn't open", fileName, "for reading");
                if (output)
                    send({error: rjs.ERROR_READFAILURE});
                return false;
            }
            if (output)
                send({});

            var ret = indexer.indexFile(source, fileName, args.verbose);
            if (!ret) {
                console.error("Couldn't parse file", fileName);
                return false;
            }
            log("Indexed", fileName, "in", (new Date() - start), "ms", ret.symbols.length, "symbols and", ret.symbolNames.length, "symbol names");

            verboseLog(ret);
            ret.indexTime = indexTime;
            db[fileName] = ret;
            return true;
        };
        if (index(true)) {
            var onFileModified = function() {
                var cached = db[fileName];
                verboseLog(fileName, "was modified");
                if (!cached) {
                    fs.unwatch(fileName, onFileModified);
                    return;
                }
                var stat = safe.fs.statSync(fileName);
                if (!stat) {
                    fs.unwatch(fileName, onFileModified);
                    return;
                }
                verboseLog(fileName, "was modified", stat.mtime, cached.indexTime);
                if (stat.mtime > cached.indexTime) {
                    index(false);
                }
            };
            fs.watch(fileName, onFileModified);
        }
        break;

    case rjs.MESSAGE_FOLLOW_SYMBOL:
    case rjs.MESSAGE_FIND_REFERENCES:
    case rjs.MESSAGE_CURSOR_INFO:
        if (!msg.location || !msg.location.file || !msg.location.offset) {
            send({error: rjs.ERROR_INVALID_LOCATION});
            break;
        }
        if (!db[msg.location.file]) {
            send({error: rjs.ERROR_FILE_NOT_INDEXED});
            break;
        }
        var result = indexer.findLocation(db[msg.location.file].symbols, msg.location.offset);
        if (!result) {
            send({error: rjs.ERROR_SYMBOL_NOT_FOUND});
            break;
        }
        function createLocation(loc) {
            return loc ? { file: msg.location.file, offset: loc[0] } : {};
        }
        verboseLog("Found symbol", result);
        if (msg.type === rjs.MESSAGE_FOLLOW_SYMBOL) {
            send({ target: createLocation(result.symbol.target) });
        } else if (msg.type === rjs.MESSAGE_CURSOR_INFO) {
            send({ cursorInfo: result.symbol });
        } else {
            var startLoc = result.pos;
            if (!result.symbol.definition && result.symbol.target) {
                var sym = indexer.findLocation(db[msg.location.file].symbols, result.symbol.target[0]);
                if (sym)
                    result = sym;
            }
            var references = result.symbol.references;
            var refs = [];
            if (references) {
                for (var idx=0; idx<result.symbol.references.length - 1; ++idx) { // if the current is the last in the array there's no reason to resort
                    if (result.symbol.references[idx][0] === startLoc) {
                        references = result.symbol.references.slice(idx + 1).concat(result.symbol.references.slice(0, idx + 1));
                        break;
                    }
                }
                references.forEach(function(value) { refs.push(createLocation(value)); });
            }

            send({ references: refs });
        }
        break;

    case rjs.MESSAGE_FIND_SYMBOLS:
        if (!msg.symbolName) {
            send({error: rjs.ERROR_MISSING_SYMBOLNAME});
            break;
        }

        var locations = [];
        function addLocations(file) {
            var ret = indexer.findSymbolsByName(db[file].symbolNames, msg.symbolName);
            if (ret) {
                for (var i=0; i<ret.locations.length; ++i) {
                    locations.push({ file: file, offset: ret.locations[i][0] });
                }
            }
        }
        if (msg.file) {
            if (!db[msg.file]) {
                send({error: rjs.ERROR_FILE_NOT_INDEXED});
                break;
            }
            addLocations(msg.file);
        } else {
            for (var f in db) {
                addLocations(f);
            }
        }
        locations.sort();
        send({ locations: locations });
        break;

    case rjs.MESSAGE_LIST_SYMBOLS:
        var symbolNameObject = {};
        var symbolNameArray = [];
        function listSymbols(symbolNames) {
            var ret = indexer.listSymbols(symbolNames, msg.prefix);
            verboseLog("Got results", ret);
            for (var i=0; i<ret.symbolNames.length; ++i) {
                var name = ret.symbolNames[i];
                if (!symbolNameObject[name]) {
                    symbolNameObject[name] = true;
                    symbolNameArray.push(name);
                }
            }
        }
        if (msg.file) {
            if (!db[msg.file]) {
                send({error: rjs.ERROR_FILE_NOT_INDEXED});
                break;
            }
            listSymbols(db[msg.file].symbolNames);
        } else {
            for (var file in db) {
                listSymbols(db[file].symbolNames);
            }
        }
        symbolNameArray.sort();
        send({ symbolNames: symbolNameArray });
        break;

    case rjs.MESSAGE_DUMP:
        if (msg.file) {
            if (!db[msg.file]) {
                send({error: rjs.ERROR_FILE_NOT_INDEXED});
                break;
            }
            send({ dump: JSON.stringify(db[msg.file], null, 4) });
        } else {
            for (var ff in db) {
                var entry = db[ff];
                send({ error: rjs.ERROR_MORE_DATA, dump: ff + " " + entry.indexTime });
            }
            send({});
        }
        break;
    }
}

server.on('connection', function(conn) {
    verboseLog("Got a connection");
    conn.on('close', function(message) {
        if (conn.log) {
            removeLog(conn);
        }
        conn = undefined;
    });
    conn.on('message', function(message) {
        var msg = safe.JSON.parse(message);
        verboseLog("got message", msg);
        if (msg.type == rjs.MESSAGE_LOG) {
            conn.log = true;
            addLog(conn, msg.verbose);
        } else {
            processMessage(safe.JSON.parse(message), function(data) {
                if (conn)
                    conn.send(JSON.stringify(data));
            });
        }
    });
});

var parseArgsOptionsClient = {
    alias: {
        h: 'help',
        c: 'compile',
        f: 'follow-symbol',
        r: 'find-references',
        U: 'dump-file',
        d: 'dump',
        u: 'cursor-info',
        N: 'no-context',
        F: 'find-symbols',
        S: 'list-symbols',
        P: 'file',
        g: 'log'
    },
    boolean: [ 'dump', 'no-context', 'verbose' ]
};

var pendingStdIn = '';
process.stdin.on('readable', function() {
    var read = process.stdin.read();
    if (!read)
        return;
    pendingStdIn += read;
    var lines = pendingStdIn.split('\n');
    if (lines.length > 1) {
        for (var i=0; i<lines.length - 1; ++i) {
            var commands;
            if (lines[i][0] === '-') {
                var parsed = parseArgs(lines[i].split(/ +/), parseArgsOptionsClient);
                commands = rjs.createCommands(parsed);
            } else {
                commands = [safe.JSON.parse(lines[i])];
            }

            commands.forEach(function(msg) {
                processMessage(msg, function(response) {
                    verboseLog("processing message", msg);
                    function write(func) {
                        log("<results><![CDATA[");
                        if (func instanceof Function) {
                            func();
                        } else {
                            console.log(func);
                        }
                        log("]]></results>");
                    }
                    if (response.target) {
                        write(rjs.printLocation({location:response.target}));
                    } else if (response.references || response.locations) {
                        write(function() {
                            var locs = response.references || response.locations;
                            var fileCache = {};
                            locs.forEach(function(loc) {
                                log(rjs.printLocation({location: loc, showContext: true, fileCache: fileCache }));
                            });
                        });
                    } else if (response.dump) {
                        write(response.dump);
                    } else if (response.cursorInfo) {
                        write(function() {
                            log(rjs.printLocation({location: response.cursorInfo.location}));
                            log('Name:',
                                response.cursorInfo.name,
                                response.cursorInfo.definition ? 'Definition' : 'Reference');
                            if (response.cursorInfo.references && response.cursorInfo.references.length) {
                                var fileCache = {};
                                log('References:');
                                response.cursorInfo.references.forEach(function(loc) {
                                    log(rjs.printLocation({location: loc, header: '  ', fileCache: fileCache, showContext: true }));
                                });
                            }
                        });
                    } else if (response.symbolNames) {
                        write(function() {
                            response.symbolNames.forEach(function(name) { log(name); });
                        });
                    } else if (response.type != rjs.MESSAGE_COMPILE) {
                        console.error("Unknown response", response);
                    }
                });
            });
        }
        pendingStdIn = lines[lines.length - 1] || '';
    }
});
